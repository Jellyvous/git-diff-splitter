#!/bin/bash
# split_diff_advanced.sh

# M√†u s·∫Øc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function hi·ªÉn th·ªã help
show_help() {
    echo -e "${BLUE}üìñ Git Diff Splitter Tool${NC}"
    echo ""
    echo "C√°ch s·ª≠ d·ª•ng: $0 <branch-name> [options]"
    echo ""
    echo "Options:"
    echo "  -b, --base COMMIT      Base commit/branch ƒë·ªÉ so s√°nh (m·∫∑c ƒë·ªãnh: main)"
    echo "  -l, --max-lines NUM    S·ªë d√≤ng t·ªëi ƒëa m·ªói part (m·∫∑c ƒë·ªãnh: 300)"
    echo "  -o, --output DIR       Th∆∞ m·ª•c output (m·∫∑c ƒë·ªãnh: diff_parts)"
    echo "  -e, --exclude PATTERN  Pattern ƒë·ªÉ exclude th√™m (m·∫∑c ƒë·ªãnh: *Migration*)"
    echo "  -h, --help            Hi·ªÉn th·ªã help"
    echo ""
    echo "V√≠ d·ª•:"
    echo "  $0 feature/new-feature                           # So s√°nh v·ªõi main"
    echo "  $0 feature/new-feature -b develop                # So s√°nh v·ªõi develop"
    echo "  $0 HEAD -b HEAD~5                               # So s√°nh HEAD v·ªõi 5 commit tr∆∞·ªõc"
    echo "  $0 feature/new-feature -b abc123                # So s√°nh v·ªõi commit abc123"
    echo "  $0 develop -l 200 -b main -e '*Migration*,*Test*'"
    echo ""
    echo "L∆∞u √Ω:"
    echo "  - BASE c√≥ th·ªÉ l√† branch name, commit hash, ho·∫∑c reference nh∆∞ HEAD~N"
    echo "  - N·∫øu kh√¥ng ch·ªâ ƒë·ªãnh -b, s·∫Ω so s√°nh v·ªõi main branch"
}

# M·∫∑c ƒë·ªãnh values
BRANCH_NAME=""
BASE_COMMIT="main"
MAX_LINES=300
OUTPUT_DIR="diff_parts"
EXCLUDE_PATTERN="*Migration*"

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -b|--base)
            BASE_COMMIT="$2"
            shift 2
            ;;
        -l|--max-lines)
            MAX_LINES="$2"
            shift 2
            ;;
        -o|--output)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        -e|--exclude)
            EXCLUDE_PATTERN="$2"
            shift 2
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        -*)
            echo -e "${RED}‚ùå Unknown option $1${NC}"
            show_help
            exit 1
            ;;
        *)
            if [ -z "$BRANCH_NAME" ]; then
                BRANCH_NAME="$1"
            else
                echo -e "${RED}‚ùå Too many arguments${NC}"
                show_help
                exit 1
            fi
            shift
            ;;
    esac
done

# Ki·ªÉm tra branch name
if [ -z "$BRANCH_NAME" ]; then
    echo -e "${RED}‚ùå L·ªói: Vui l√≤ng cung c·∫•p t√™n branch/commit${NC}"
    show_help
    exit 1
fi

# Ki·ªÉm tra n·∫øu branch/commit t·ªìn t·∫°i
if ! git rev-parse --verify "$BRANCH_NAME" >/dev/null 2>&1; then
    echo -e "${RED}‚ùå L·ªói: Branch/commit '$BRANCH_NAME' kh√¥ng t·ªìn t·∫°i${NC}"
    echo -e "${YELLOW}üí° C√°c branch c√≥ s·∫µn:${NC}"
    git branch -a
    exit 1
fi

# Ki·ªÉm tra n·∫øu base commit t·ªìn t·∫°i
if ! git rev-parse --verify "$BASE_COMMIT" >/dev/null 2>&1; then
    echo -e "${RED}‚ùå L·ªói: Base commit/branch '$BASE_COMMIT' kh√¥ng t·ªìn t·∫°i${NC}"
    echo -e "${YELLOW}üí° C√°c branch c√≥ s·∫µn:${NC}"
    git branch -a
    exit 1
fi

# L·∫•y commit hash ƒë·ªÉ hi·ªÉn th·ªã r√µ r√†ng h∆°n
BRANCH_HASH=$(git rev-parse --short "$BRANCH_NAME")
BASE_HASH=$(git rev-parse --short "$BASE_COMMIT")

FULL_DIFF_FILE="diff_${BASE_HASH}_to_${BRANCH_HASH}_$(date +%Y%m%d_%H%M%S).txt"

echo -e "${BLUE}üîç So s√°nh t·ª´: ${GREEN}$BASE_COMMIT${NC} ${YELLOW}($BASE_HASH)${NC}"
echo -e "${BLUE}         ƒë·∫øn: ${GREEN}$BRANCH_NAME${NC} ${YELLOW}($BRANCH_HASH)${NC}"
echo -e "${BLUE}üìè Gi·ªõi h·∫°n lines m·ªói part: ${GREEN}$MAX_LINES${NC}"
echo -e "${BLUE}üìÅ Th∆∞ m·ª•c output: ${GREEN}$OUTPUT_DIR${NC}"
echo -e "${BLUE}üö´ Exclude pattern: ${GREEN}$EXCLUDE_PATTERN${NC}"

# T·∫°o full diff v·ªõi base commit ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
echo -e "${YELLOW}‚è≥ ƒêang t·∫°o diff...${NC}"
git diff "$BASE_COMMIT"..."$BRANCH_NAME" -- . ":(exclude)$EXCLUDE_PATTERN" > $FULL_DIFF_FILE

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå L·ªói: Kh√¥ng th·ªÉ t·∫°o diff${NC}"
    exit 1
fi

TOTAL_LINES=$(wc -l < $FULL_DIFF_FILE)
echo -e "${BLUE}üìä T·ªïng s·ªë d√≤ng trong diff: ${GREEN}$TOTAL_LINES${NC}"

if [ $TOTAL_LINES -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c t√¨m th·∫•y gi·ªØa $BASE_COMMIT v√† $BRANCH_NAME${NC}"
    rm $FULL_DIFF_FILE
    exit 0
fi

# Hi·ªÉn th·ªã summary v·ªÅ files ƒë√£ thay ƒë·ªïi
echo -e "${BLUE}üìã Files thay ƒë·ªïi:${NC}"
git diff --name-only "$BASE_COMMIT"..."$BRANCH_NAME" -- . ":(exclude)$EXCLUDE_PATTERN" | head -10
CHANGED_FILES_COUNT=$(git diff --name-only "$BASE_COMMIT"..."$BRANCH_NAME" -- . ":(exclude)$EXCLUDE_PATTERN" | wc -l)
if [ $CHANGED_FILES_COUNT -gt 10 ]; then
    echo -e "${YELLOW}   ... v√† $((CHANGED_FILES_COUNT - 10)) files kh√°c${NC}"
fi

if [ $TOTAL_LINES -le $MAX_LINES ]; then
    echo -e "${GREEN}‚úÖ Diff nh·ªè h∆°n $MAX_LINES d√≤ng, kh√¥ng c·∫ßn chia nh·ªè${NC}"
    echo -e "${BLUE}üìÑ File diff: ${GREEN}$FULL_DIFF_FILE${NC}"
else
    echo -e "${YELLOW}üì¶ Diff qu√° l·ªõn, ƒëang chia th√†nh c√°c part...${NC}"
    
    mkdir -p $OUTPUT_DIR
    rm -f $OUTPUT_DIR/diff_part_*.txt
    
    # Chia file v·ªõi prefix c√≥ √Ω nghƒ©a v√† extension .txt
    split -l $MAX_LINES $FULL_DIFF_FILE $OUTPUT_DIR/diff_part_
    
    # ƒê·ªïi t√™n c√°c file th√†nh .txt v√† ƒë√°nh s·ªë
    PART_NUM=1
    for file in $OUTPUT_DIR/diff_part_*; do
        if [[ "$file" != *.txt ]]; then
            # T·∫°o t√™n file c√≥ format ƒë·∫πp h∆°n
            NEW_NAME="$OUTPUT_DIR/diff_part_$(printf "%02d" $PART_NUM)_${BASE_HASH}_to_${BRANCH_HASH}.txt"
            mv "$file" "$NEW_NAME"
            PART_NUM=$((PART_NUM + 1))
        fi
    done
    
    PART_COUNT=$(ls $OUTPUT_DIR/diff_part_*.txt | wc -l)
    
    echo -e "${GREEN}‚úÖ ƒê√£ chia th√†nh $PART_COUNT parts${NC}"
    echo ""
    echo -e "${BLUE}üìã Danh s√°ch parts:${NC}"
    
    PART_NUM=1
    for file in $OUTPUT_DIR/diff_part_*.txt; do
        LINES_IN_PART=$(wc -l < "$file")
        echo -e "   ${GREEN}üìÑ Part $PART_NUM:${NC} $(basename "$file") (${YELLOW}$LINES_IN_PART d√≤ng${NC})"
        PART_NUM=$((PART_NUM + 1))
    done
    
    # X√≥a file diff g·ªëc v√¨ ƒë√£ chia nh·ªè
    rm $FULL_DIFF_FILE
    echo -e "${BLUE}üóëÔ∏è  ƒê√£ x√≥a file diff g·ªëc (ƒë√£ chia nh·ªè)${NC}"
fi

echo ""
echo -e "${GREEN}üéâ Ho√†n th√†nh!${NC}"

# Hi·ªÉn th·ªã th·ªëng k√™ nhanh
echo -e "${BLUE}üìà Th·ªëng k√™:${NC}"
echo -e "   ${YELLOW}Files thay ƒë·ªïi:${NC} $CHANGED_FILES_COUNT"
echo -e "   ${YELLOW}T·ªïng d√≤ng diff:${NC} $TOTAL_LINES"
if [ $TOTAL_LINES -gt $MAX_LINES ]; then
    echo -e "   ${YELLOW}S·ªë parts:${NC} $PART_COUNT"
fi
